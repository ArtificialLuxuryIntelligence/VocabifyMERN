{"version":3,"sources":["../../node_modules/require_optional sync","utils/auth.js","components/ProtectedRoute/ProtectedRoute.js","components/Nav/Nav.js","components/Spanner/Spanner.js","components/WordDef/WordDef.js","components/RandomWord/RandomWord.js","components/LanguageDropdown/LanguageDropdown.js","components/SearchResults/SearchResults.js","components/SearchForm/SearchForm.js","components/Sidebar/Sidebar.js","components/SidebarLight/SidebarLight.js","components/Home/Home.js","components/Signin/Signin.js","components/Account/Account.js","components/Read/Textarea/Textarea.js","components/Read/Textreader/Textreader.js","components/Read/Read.js","App.js","serviceWorker.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","auth","loggingIn","localStorage","setItem","JSON","stringify","isLoggedIn","loggingOut","obj","parse","getItem","ProtectedRoute","Component","component","rest","render","props","to","pathname","state","from","location","Nav","navigate","navOpen","this","push","className","onClick","toggleNav","handleSignout","setState","Spanner","randomString","split","map","stringPart","index","Fragment","key","includes","part","i","wordHeading","handleSpanClick","Word","word","open","triggerClassName","triggerOpenedClassName","trigger","transitionTime","POS","lang","Object","meaning","Definition","def","definition","slice","definitions","WordDef","componentDidMount","console","log","isLoading","defintionToggled","autoload","getWordDef","a","fetchFail","getDefinitions","length","handleAddWord","addUnknownWord","handleRemoveWord","removeWord","handleTranslateWord","window","unknownWords","indexOf","prevProps","RandomWord","getNewWord","token","vocabSize","knownWords","headers","Authorization","axios","post","response","data","success","newWord","wordKnown","status","history","handleNewWord","bind","redirectToRead","addKnownWord","addToAppState","LanguageDropdown","value","onChange","handleDropdownChange","SearchResults","SearchForm","name","ref","handleChange","handleSubmit","Sidebar","toggleSidebar","sidebarOpen","toggleSearchBox","searchBoxOpen","target","preventDefault","searchTerm","searchWord","document","getElementById","reset","isNewWordLoading","sidebarMessage","sidebarWords","definitionJSON","handleDeleteWord","SidebarLight","sanitizeText","innerText","Home","Signin","changeView","view","currentView","message","signUpEmail","type","required","signUpPassword","handleSignUp","signInEmail","signInPassword","handleSignIn","email","password","then","res","words","local","catch","err","Account","loadedWords","tagName","nextElementSibling","style","display","Textarea","renderText","placeholder","Textreader","handleNewText","fullTextSplit","pageNumber","handlePrevPage","handleNextPage","Read","removeWordArrayDupes","arr","noDupes","x","loadPageDefinitions","currentPageText","removeCaps","sidebarWordsArray","forEach","Set","textarea","querySelector","fullText","splitText","largestLoadedPageNumber","parentWord","classList","setTimeout","queryWord","defs","sidebarWordArray","splice","concat","unshift","Array","stopPropagation","parentElement","children","textareaValue","string","cutoff","join","App","sendAppStateToServer","uniq","inputText","toLowerCase","replace","trim","filter","wordArray","json","prevState","forceUpdate","en","es","fr","saveToLocal","exact","path","Boolean","hostname","match","ReactDOM","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e6315a3f.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 123;","const auth = {\r\n  loggingIn() {\r\n    localStorage.setItem(\"vocabify\", JSON.stringify({ isLoggedIn: true }));\r\n  },\r\n  loggingOut() {\r\n    //currently removes all\r\n    //send app data back to server here?\r\n    localStorage.setItem(\"vocabify\", JSON.stringify({}));\r\n  },\r\n  //doesnt work if token has expired (probably redundant)- see router for redirect if passport cannot authenticate\r\n  //server lookup here\r\n\r\n  // \"/users/authcheck\" returns 401 or 200\r\n  isLoggedIn() {\r\n    let obj = JSON.parse(localStorage.getItem(\"vocabify\"));\r\n    if (obj && obj.isLoggedIn) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  },\r\n};\r\n\r\nexport default auth;\r\n","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport auth from \"../../utils/auth\";\r\n\r\nconst ProtectedRoute = ({ component: Component, ...rest }) => {\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={props => {\r\n        if (auth.isLoggedIn()) {\r\n          return <Component {...props} {...rest} />;\r\n        } else {\r\n          return (\r\n            <Redirect\r\n              to={{\r\n                pathname: \"/login\",\r\n                state: {\r\n                  from: props.location\r\n                }\r\n              }}\r\n            />\r\n          );\r\n        }\r\n      }}\r\n    />\r\n  );\r\n};\r\nexport default ProtectedRoute;\r\n","import React, { Component } from \"react\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\nimport \"./Nav.scss\";\r\n// import axios from \"axios\";\r\n// import auth from \"../../utils/auth\";\r\n\r\nclass Nav extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { navigate: false, navOpen: false };\r\n\r\n    // this.handleSignout = this.handleSignout.bind(this);\r\n  }\r\n\r\n  render() {\r\n    let navigate = this.state.navigate;\r\n    if (navigate) {\r\n      return <Redirect to=\"/login\" push={true}></Redirect>;\r\n    }\r\n    return (\r\n      <nav className={this.state.navOpen ? \"nav-open\" : \"\"}>\r\n        <span>\r\n          <h1>Vocabify</h1>\r\n        </span>\r\n        <div onClick={() => this.toggleNav()} className=\"mobile-menu-toggle\">\r\n          <div id=\"hamburger\">\r\n            <span></span>\r\n          </div>\r\n        </div>\r\n        <ul>\r\n          <li className=\"nav-item\">\r\n            <Link to=\"/\">Home</Link>\r\n          </li>\r\n\r\n          <li className=\"nav-item\">\r\n            <Link to=\"/account\">Account</Link>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <Link to=\"/read\">Read</Link>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <Link to=\"/\" onClick={(e) => this.handleSignout(e)}>\r\n              Logout\r\n            </Link>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    );\r\n  }\r\n\r\n  handleSignout(e) {\r\n    this.setState({ navigate: true });\r\n    this.props.handleSignout(e);\r\n  }\r\n\r\n  toggleNav() {\r\n    this.setState({ navOpen: !this.state.navOpen });\r\n  }\r\n}\r\n\r\nexport default Nav;\r\n","import React from \"react\";\r\n\r\nconst Spanner = (props) => {\r\n  const { randomString } = props;\r\n\r\n  if (!randomString) {\r\n    return <p>*Empty entry*</p>;\r\n  }\r\n\r\n  //splits text by space and by newline\r\n  return randomString.split(\" \").map((stringPart, index) => {\r\n    return (\r\n      // <React.Fragment key={index}>\r\n      <React.Fragment key={index + stringPart}>\r\n        {index === 0 ? null : \" \"}\r\n\r\n        {stringPart.includes(\"\\n\") ? (\r\n          stringPart.split(\"\\n\").map((part, i) => (\r\n            <React.Fragment key={i + stringPart}>\r\n              {i === 0 ? null : \"\\n\"}\r\n              <span\r\n                className={`searchable-word ${\r\n                  props.wordHeading ? props.wordHeading : \"\"\r\n                }`}\r\n                onClick={(e) => props.handleSpanClick(e)}\r\n              >\r\n                {part}\r\n              </span>\r\n            </React.Fragment>\r\n          ))\r\n        ) : (\r\n          <span\r\n            // key={index}\r\n            className={`searchable-word ${\r\n              props.wordHeading ? props.wordHeading : \"\"\r\n            }`}\r\n            onClick={(e) => props.handleSpanClick(e)}\r\n          >\r\n            {stringPart}\r\n          </span>\r\n        )}\r\n      </React.Fragment>\r\n    );\r\n  });\r\n};\r\n\r\nexport default Spanner;\r\n","//component accepts OPTIONAL props\r\n// autoload: boolean          //fetches and autoloads def of word given\r\n// definition: array          //autoload definition supplied (set autoload true)\r\n\r\n// REQUIRED PROPS:\r\n// ?\r\n///////////\r\n// to do:\r\n// \"sorry couldn't find def\" for autoload words.. (sometimes no search results - currently defaults to clickable word with no def)\r\n///\r\n\r\nimport React, { Component } from \"react\";\r\nimport \"./WordDef.css\";\r\n\r\n// import axios from \"axios\";\r\n// import Sidebar from \"../Read/Sidebar/Sidebar\";\r\nimport Collapsible from \"react-collapsible\";\r\n// import Spanner from \"../../Spanner/Spanner\";\r\n\r\nimport Spanner from \"../Spanner/Spanner\";\r\n// import { Redirect } from \"react-router-dom\";\r\n// import auth from \"../../utils/auth\";\r\n\r\nclass WordDef extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      // newWord: this.props.word,\r\n      isLoading: true,\r\n      defintionToggled: false,\r\n      definition: this.props.definition || [],\r\n    };\r\n\r\n    // this.getNewWord = this.getNewWord.bind(this);\r\n  }\r\n\r\n  render() {\r\n    if (\r\n      this.state.fetchFail ||\r\n      (this.state.defintionToggled === false && this.props.autoload)\r\n    ) {\r\n      return (\r\n        <p onClick={() => this.getWordDef()}>\r\n          Cannot find definiton of <em>{this.props.word}</em>. Click here to try\r\n          again\r\n        </p>\r\n      );\r\n    }\r\n    // if (this.state.defintionToggled === false && this.props.autoload) {\r\n    //   return (\r\n    //     <p onClick={() => this.getWordDef()}>\r\n    //       Cannot find definiton of <em>{this.props.word}</em>. Click here to try\r\n    //       again\r\n    //     </p>\r\n    //   );\r\n    // }\r\n    if (this.state.defintionToggled === false) {\r\n      return <p onClick={() => this.getWordDef()}>{this.props.word}</p>;\r\n    }\r\n    if (this.state.isLoading) {\r\n      return <p> Loading word...</p>;\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        {/* {this.props.isNewWordLoading ? <p>adding word ... </p> : null} */}\r\n        <div>\r\n          {this.state.definition.map(\r\n            (word, i) => {\r\n              // if (this.props.sidebarWords.indexOf(word[0].word) !== -1) {\r\n              if (word.length > 1) {\r\n                return (\r\n                  <div key={i}>\r\n                    {this.props.unknownWords.indexOf(word[0].word) === -1 && (\r\n                      <button\r\n                        className={\"add-button\"}\r\n                        onClick={(e) => this.handleAddWord()}\r\n                      >\r\n                        Add word\r\n                      </button>\r\n                    )}\r\n                    {this.props.unknownWords.indexOf(word[0].word) !== -1 && (\r\n                      <button\r\n                        className={\"remove-button\"}\r\n                        onClick={(e) => this.handleRemoveWord()}\r\n                      >\r\n                        Remove word\r\n                      </button>\r\n                    )}\r\n                    <button\r\n                      className=\"translate\"\r\n                      onClick={(e) => this.handleTranslateWord()}\r\n                    >\r\n                      Translate\r\n                    </button>\r\n\r\n                    <Collapsible\r\n                      open={true}\r\n                      triggerClassName=\"clickable word-heading\"\r\n                      triggerOpenedClassName=\"clickable word-heading\"\r\n                      handleSpanClick={this.props.handleSpanClick}\r\n                      trigger={word[0].word}\r\n                      transitionTime={120}\r\n                    >\r\n                      <Word\r\n                        handleSpanClick={this.props.handleSpanClick}\r\n                        word={word}\r\n                        lang={this.props.lang}\r\n                        wordHeading={word[0].word}\r\n                      />\r\n                    </Collapsible>\r\n                    {/* <button onClick={e => this.props.handleDeleteWord(e)}>\r\n                  x\r\n                </button> */}\r\n                  </div>\r\n                );\r\n              } else {\r\n                return (\r\n                  <div key={i}>\r\n                    {word.map((word, i) => {\r\n                      return (\r\n                        <div key={i}>\r\n                          {this.props.unknownWords.indexOf(word.word) ===\r\n                            -1 && (\r\n                            <button\r\n                              className={\"add-button\"}\r\n                              onClick={(e) => this.handleAddWord()}\r\n                            >\r\n                              Add word\r\n                            </button>\r\n                          )}\r\n                          {this.props.unknownWords.indexOf(word.word) !==\r\n                            -1 && (\r\n                            <button\r\n                              className={\"remove-button\"}\r\n                              onClick={(e) => this.handleRemoveWord()}\r\n                            >\r\n                              Remove word\r\n                            </button>\r\n                          )}\r\n                          <button\r\n                            className=\"translate\"\r\n                            onClick={(e) => this.handleTranslateWord()}\r\n                          >\r\n                            Translate\r\n                          </button>\r\n\r\n                          <Collapsible\r\n                            open={true}\r\n                            triggerClassName=\"clickable word-heading\"\r\n                            triggerOpenedClassName=\"clickable word-heading\"\r\n                            handleSpanClick={this.props.handleSpanClick}\r\n                            trigger={word.word}\r\n                            transitionTime={120}\r\n                            wordHeading={word.word}\r\n                          >\r\n                            <POS\r\n                              handleSpanClick={this.props.handleSpanClick}\r\n                              word={word}\r\n                              lang={this.props.lang}\r\n                              wordHeading={word.word}\r\n                            />\r\n                          </Collapsible>\r\n                        </div>\r\n                      );\r\n                    })}\r\n                  </div>\r\n                );\r\n              }\r\n            }\r\n            //   }\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    if (this.props.definition) {\r\n      console.log(\"got a def\");\r\n      this.setState({ isLoading: false, defintionToggled: true });\r\n      return;\r\n    }\r\n    if (this.props.autoload) {\r\n      this.getWordDef();\r\n    }\r\n    return;\r\n  };\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.autoload && this.props.word !== prevProps.word) {\r\n      this.getWordDef();\r\n      console.log(\"did update\");\r\n    }\r\n  }\r\n\r\n  getWordDef = async () => {\r\n    this.setState({\r\n      isLoading: true,\r\n      defintionToggled: true,\r\n      fetchFail: false,\r\n    });\r\n    //error only thrown for 401 (user not logged in) in getDefinitions function\r\n    try {\r\n      let definition = await this.props.getDefinitions(\r\n        [this.props.word],\r\n        \"false\"\r\n      );\r\n      //handle cant get from server\r\n\r\n      if (!definition || definition.length === 0) {\r\n        this.setState({\r\n          isLoading: false,\r\n          defintionToggled: false,\r\n          fetchFail: true,\r\n        });\r\n        return;\r\n      }\r\n      this.setState({\r\n        definition,\r\n        isLoading: false,\r\n        word: definition[0][0].word,\r\n        fetchFail: false,\r\n      });\r\n\r\n      // return;\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  //from state if def was fetched internally/ from props if def was passed in from parent\r\n  handleAddWord = () => {\r\n    this.props.addUnknownWord(this.state.word || this.props.word);\r\n    // console.log(this.state.word || this.props.word);\r\n    // console.log(this.props.unknownWords);\r\n  };\r\n  handleRemoveWord = () => {\r\n    this.props.removeWord(this.state.word || this.props.word);\r\n  };\r\n\r\n  handleTranslateWord = () => {\r\n    let word;\r\n    if (this.state.word) {\r\n      word = this.state.word;\r\n    } else {\r\n      word = this.props.word;\r\n    }\r\n    //to do : response popup params\r\n    let params = `scrollbars=no,resizable=no,status=no,location=no,toolbar=no,menubar=no,width=600,height=300,left=100,top=100`;\r\n    // window.open(\r\n    //   `https://www.google.com/search?q=translate%20${word}%20${this.props.lang}%20to%20english`,\r\n    //   \"translate\",\r\n    //   params\r\n    // );\r\n    window.open(\r\n      `https://translate.google.com/?um=1&ie=UTF-8&hl=en&client=tw-ob#${this.props.lang}/en/${word}`,\r\n      \"translate\",\r\n      params\r\n    );\r\n  };\r\n}\r\n\r\nfunction Word(props) {\r\n  // console.log(props.word);\r\n\r\n  return (\r\n    <div>\r\n      {props.word.map((word, i) => {\r\n        return (\r\n          <div key={i}>\r\n            {/* <h2>{word.word}</h2> */}\r\n            <Collapsible\r\n              open={i === 0 ? true : false}\r\n              triggerClassName=\"clickable word\"\r\n              triggerOpenedClassName=\"clickable word\"\r\n              handleSpanClick={props.handleSpanClick}\r\n              trigger={word.word}\r\n              transitionTime={120}\r\n            >\r\n              <POS\r\n                handleSpanClick={props.handleSpanClick}\r\n                word={word}\r\n                lang={props.lang}\r\n                wordHeading={props.wordHeading}\r\n              />\r\n            </Collapsible>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction POS(props) {\r\n  // console.log(props.word.meaning);\r\n  let keys = Object.keys(props.word.meaning);\r\n  // console.log(keys);\r\n\r\n  // console.log(props.word.meaning[])\r\n\r\n  return (\r\n    <div>\r\n      {keys.map((key, i) => {\r\n        return (\r\n          <div key={i}>\r\n            {/* <p>{key}</p> */}\r\n            <Collapsible\r\n              open={i === 0 ? true : false}\r\n              triggerClassName=\"clickable pos\"\r\n              triggerOpenedClassName=\"clickable pos\"\r\n              handleSpanClick={props.handleSpanClick}\r\n              trigger={key}\r\n              transitionTime={120}\r\n            >\r\n              <ol>\r\n                <Definition\r\n                  handleSpanClick={props.handleSpanClick}\r\n                  def={props.word.meaning[key]}\r\n                  lang={props.lang}\r\n                  wordHeading={props.wordHeading}\r\n                />\r\n              </ol>\r\n            </Collapsible>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Definition(props) {\r\n  // console.log(props.def);\r\n  switch (props.lang) {\r\n    case \"en\":\r\n      return (\r\n        <div>\r\n          {props.def.map((def, i) => {\r\n            if (def.definition) {\r\n              return (\r\n                <div key={i + def.definition.slice(1, 6)}>\r\n                  {def.definition && (\r\n                    <li>\r\n                      <Spanner\r\n                        handleSpanClick={props.handleSpanClick}\r\n                        randomString={def.definition}\r\n                        lang={props.lang}\r\n                        wordHeading={props.wordHeading}\r\n                      ></Spanner>\r\n                      {/* <p>{def.definition}</p> */}\r\n                    </li>\r\n                  )}\r\n                </div>\r\n              );\r\n            }\r\n            return null;\r\n          })}\r\n        </div>\r\n      );\r\n    case \"fr\":\r\n    case \"es\":\r\n      return (\r\n        <div>\r\n          {props.def.definitions.map((def, i) => {\r\n            if (def.definition) {\r\n              return (\r\n                <div key={i + def.definition.slice(1, 6)}>\r\n                  {def.definition && (\r\n                    <li>\r\n                      <Spanner\r\n                        handleSpanClick={props.handleSpanClick}\r\n                        randomString={def.definition}\r\n                        lang={props.lang}\r\n                        wordHeading={props.wordHeading}\r\n                      ></Spanner>\r\n                      {/* <p>{def.definition}</p> */}\r\n                    </li>\r\n                  )}\r\n                </div>\r\n              );\r\n            }\r\n            return null;\r\n          })}\r\n        </div>\r\n      );\r\n    default:\r\n      return null;\r\n  }\r\n}\r\n\r\nexport default WordDef;\r\n","import React, { Component } from \"react\";\r\nimport \"./RandomWord.css\";\r\n\r\nimport \"./RandomWord.css\";\r\nimport axios from \"axios\";\r\n// import Sidebar from \"../Read/Sidebar/Sidebar\";\r\n// import Collapsible from \"react-collapsible\";\r\n// import Spanner from \"../Spanner/Spanner\";\r\nimport WordDef from \"../WordDef/WordDef\";\r\n\r\n// import Spanner from \"../../Spanner/Spanner\";\r\n// import { Redirect } from \"react-router-dom\";\r\nimport auth from \"../../utils/auth\";\r\n\r\nclass RandomWord extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      newWord: \"floof\",\r\n      wordKnown: false,\r\n      definition: [],\r\n      isLoading: true,\r\n      lang: this.props.lang,\r\n      // isLoading: false\r\n    };\r\n\r\n    this.getNewWord = this.getNewWord.bind(this);\r\n  }\r\n\r\n  render() {\r\n    if (this.props.unknownWords.length < 5) {\r\n      return (\r\n        <div>\r\n          <p>\r\n            It looks like you don't have enough saved words for us to get a good\r\n            idea of your level.\r\n          </p>\r\n          <p>\r\n            Take this{\" \"}\r\n            <a className=\"testLink\" onClick={() => this.props.redirectToRead()}>\r\n              reading test\r\n            </a>{\" \"}\r\n            to get started.\r\n          </p>\r\n        </div>\r\n      );\r\n    }\r\n    if (this.state.isLoading) {\r\n      return (\r\n        <div className=\"random-word\">\r\n          <p> Loading new word...</p>\r\n        </div>\r\n      );\r\n    }\r\n    if (this.state.definition.length === 0) {\r\n      return (\r\n        <div className=\"random-word\">\r\n          <p>\r\n            Sorry, we couldn't find a word.\r\n            <button onClick={() => this.handleNewWord()}>Try again</button>\r\n          </p>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className={\"random-word\"}>\r\n        <button onClick={() => this.handleNewWord()}>New word</button>\r\n        <WordDef\r\n          lang={this.props.lang}\r\n          autoload={true}\r\n          word={this.state.newWord}\r\n          definition={this.state.definition}\r\n          handleSpanClick={this.props.handleSpanClick}\r\n          vocabSize={this.props.vocabSize}\r\n          getDefinitions={this.props.getDefinitions}\r\n          addKnownWord={this.props.addKnownWord}\r\n          addUnknownWord={this.props.addUnknownWord}\r\n          removeWord={this.props.removeWord}\r\n          unknownWords={this.props.unknownWords}\r\n          addToAppState={this.props.addToAppState}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // shouldComponentUpdate(nextProps) {\r\n  //   return nextProps.lang == this.props.lang;\r\n  // }\r\n\r\n  static getDerivedStateFromProps(props, state) {\r\n    if (props.lang !== state.lang) {\r\n      return {\r\n        lang: props.lang,\r\n        definition: [],\r\n      };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    //glitches if you refresh (calls didmount and didupdate?)\r\n    //on first load getNewWord is called twice - once here and once didMount?\r\n    if (\r\n      this.props.lang !== prevProps.lang &&\r\n      this.props.unknownWords.length > 4\r\n    ) {\r\n      this.getNewWord();\r\n    }\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    // console.log(\"myVOCAB\", this.props.vocabSize);\r\n    // console.log(\"did mount\");\r\n    if (\r\n      this.state.definition.length === 0 &&\r\n      this.props.unknownWords.length > 4\r\n    ) {\r\n      this.getNewWord();\r\n    }\r\n  };\r\n\r\n  getNewWord = async () => {\r\n    this.setState({ isLoading: true });\r\n    let token = JSON.parse(localStorage.getItem(\"vocabify\")).token;\r\n    let obj = {\r\n      // token,\r\n      vocabSize: this.props.vocabSize,\r\n      unknownWords: this.props.unknownWords,\r\n      knownWords: this.props.knownWords,\r\n      lang: this.props.lang,\r\n    };\r\n    let headers = {\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: `bearer ${token}`,\r\n    };\r\n    // console.log(obj);\r\n\r\n    console.log(\"getting new word\");\r\n    try {\r\n      let response = await axios.post(\"/words/random\", obj, { headers });\r\n\r\n      console.log(response); // this.setState({ definition });\r\n      if (response.data.success) {\r\n        this.setState({ newWord: response.data.definition[0][0].word });\r\n        this.setState({ definition: response.data.definition });\r\n        this.setState({ isLoading: false });\r\n        this.setState({ wordKnown: false });\r\n      }\r\n      this.setState({ isLoading: false });\r\n      return;\r\n    } catch (err) {\r\n      if (err.response && err.response.status === 401) {\r\n        console.log(\"unauthorized.. loggin out\");\r\n        auth.loggingOut();\r\n        this.props.history.push(\"/login\");\r\n      }\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  handleNewWord = () => {\r\n    this.getNewWord();\r\n  };\r\n}\r\n\r\nexport default RandomWord;\r\n","import React, { Component } from \"react\";\r\n\r\nclass LanguageDropdown extends Component {\r\n  // constructor(props) {\r\n  //   super(props);\r\n  //   // this.state = { lang: this.props.lang };\r\n  // }\r\n\r\n  render() {\r\n    return (\r\n      <select\r\n        value={this.props.lang}\r\n        onChange={this.props.handleDropdownChange}\r\n      >\r\n        <option value=\"en\">English</option>\r\n        <option value=\"es\">Spanish</option>\r\n        <option value=\"fr\">French</option>\r\n      </select>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LanguageDropdown;\r\n","import React, { Component } from \"react\";\r\n\r\nimport WordDef from \"../WordDef/WordDef\";\r\nimport \"./SearchResults.css\";\r\n\r\nclass SearchResults extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      lang: this.props.lang,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"search-results\">\r\n        {/* <h3>Word search result: </h3> */}\r\n\r\n        <WordDef\r\n          autoload={this.props.autoload}\r\n          word={this.props.word}\r\n          lang={this.props.lang}\r\n          handleSpanClick={this.props.handleSpanClick}\r\n          vocabSize={this.props.vocabSize}\r\n          getDefinitions={this.props.getDefinitions}\r\n          addKnownWord={this.props.addKnownWord}\r\n          addUnknownWord={this.props.addUnknownWord}\r\n          removeWord={this.props.removeWord}\r\n          unknownWords={this.props.unknownWords}\r\n          addToAppState={this.props.addToAppState}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // static getDerivedStateFromProps(props, state) {\r\n  //   if (props.lang !== state.lang) {\r\n  //     return {\r\n  //       lang: props.lang\r\n  //     };\r\n  //   }\r\n  // }\r\n\r\n  // componentDidUpdate(prevProps) {\r\n  //   //glitches if you refresh (calls didmount and didupdate?)\r\n  //   if (this.props.lang != prevProps.lang) {\r\n  //     console.log(\"did update\");\r\n  //     this.getNewWord();\r\n  //   }\r\n  //   console.log(\"updated-  no lang change\");\r\n  // }\r\n}\r\n\r\nexport default SearchResults;\r\n","import React, { Component } from \"react\";\r\n\r\nimport WordDef from \"../WordDef/WordDef\";\r\n// import \"./SearchForm.css\";\r\n\r\nclass SearchForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"search-form\">\r\n        <h3 id=\"search-heading\">search</h3>\r\n        <form id=\"searchForm\">\r\n          <input\r\n            name=\"searchTerm\"\r\n            ref=\"searchTerm\"\r\n            value={this.props.value}\r\n            onChange={this.props.handleChange}\r\n            lang={this.props.lang}\r\n          />\r\n          <button onClick={this.props.handleSubmit}>submit</button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // static getDerivedStateFromProps(props, state) {\r\n  //   if (props.lang !== state.lang) {\r\n  //     return {\r\n  //       lang: props.lang\r\n  //     };\r\n  //   }\r\n  // }\r\n\r\n  // componentDidUpdate(prevProps) {\r\n  //   //glitches if you refresh (calls didmount and didupdate?)\r\n  //   if (this.props.lang != prevProps.lang) {\r\n  //     console.log(\"did update\");\r\n  //     this.getNewWord();\r\n  //   }\r\n  //   console.log(\"updated-  no lang change\");\r\n  // }\r\n}\r\n\r\nexport default SearchForm;\r\n","import React, { Component } from \"react\";\r\n// import { Redirect } from \"react-router-dom\";\r\n// import axios from \"axios\";\r\n// import auth from \"../../utils/auth\";\r\n\r\nimport \"./Sidebar.scss\";\r\n\r\n// import Collapsible from \"react-collapsible\";\r\n// import Spanner from \"../../Spanner/Spanner\";\r\nimport WordDef from \"../WordDef/WordDef\";\r\nimport SearchResults from \"../SearchResults/SearchResults\";\r\nimport SearchForm from \"../SearchForm/SearchForm\";\r\n\r\nclass Sidebar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      sidebarOpen: false,\r\n      searchWord: null,\r\n      searchTerm: \"\",\r\n      searchBoxOpen: true,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    // if (this.props.isLoading) {\r\n    //   return (\r\n    //     <div\r\n    //       className={\r\n    //         this.state.sidebarOpen\r\n    //           ? \"sidebar sidebar-open\"\r\n    //           : \"sidebar sidebar-closed\"\r\n    //       }\r\n    //     >\r\n    //       <p> Loading words...</p>\r\n    //     </div>\r\n    //   );\r\n    // }\r\n    return (\r\n      <div>\r\n        <div id=\"sidebar-nav-sm\">\r\n          <button\r\n            onClick={() => this.toggleSidebar()}\r\n            className=\"sidebar-toggle sidebar-toggle-sm\"\r\n          >\r\n            {this.state.sidebarOpen ? \"close\" : \"open\"}\r\n          </button>\r\n        </div>\r\n        <div\r\n          className={\r\n            this.state.sidebarOpen ? \"sidebar sidebar-open\" : \"sidebar\"\r\n          }\r\n        >\r\n          <div className=\"sidebar-sticky\">\r\n            <div className=\"heading\">\r\n              <h2> words</h2>\r\n              <button\r\n                className=\"sidebar-toggle sidebar-toggle-md\"\r\n                onClick={() => this.toggleSidebar()}\r\n              >\r\n                {this.state.sidebarOpen ? \">>\" : \"<<\"}\r\n              </button>\r\n            </div>\r\n            <div className=\"search\">\r\n              <button id=\"hide-search\" onClick={() => this.toggleSearchBox()}>\r\n                {this.state.searchBoxOpen ? \"close search\" : \"open search\"}\r\n              </button>\r\n              <div\r\n                className={\r\n                  this.state.searchBoxOpen\r\n                    ? \"search-box search-box-open\"\r\n                    : \"search-box search-box-closed\"\r\n                }\r\n              >\r\n                <SearchForm\r\n                  value={this.state.searchTerm}\r\n                  handleChange={this.handleChange}\r\n                  lang={this.props.lang}\r\n                  handleSubmit={this.handleSubmit}\r\n                />\r\n\r\n                <div>\r\n                  {this.state.searchWord !== null && (\r\n                    <>\r\n                      <SearchResults\r\n                        history={this.props.history}\r\n                        autoload={true}\r\n                        word={this.state.searchWord}\r\n                        lang={this.props.lang}\r\n                        handleSpanClick={this.props.handleSpanClick}\r\n                        vocabSize={this.props.vocabSize}\r\n                        getDefinitions={this.props.getDefinitions}\r\n                        addKnownWord={this.props.addKnownWord}\r\n                        addUnknownWord={this.props.addUnknownWord}\r\n                        removeWord={this.props.removeWord}\r\n                        unknownWords={this.props.unknownWords}\r\n                        addToAppState={this.props.addToAppState}\r\n                      />\r\n                    </>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n            {this.props.isNewWordLoading ? <p>adding word ... </p> : null}\r\n            {this.props.isLoading ? <p> Loading words...</p> : null}\r\n            {this.props.sidebarMessage.length > 0 ? (\r\n              <p className=\"sidebar-message\">{this.props.sidebarMessage}</p>\r\n            ) : null}\r\n          </div>\r\n\r\n          <div className=\"scroll-wrapper\">\r\n            <div className=\"defs\">\r\n              {this.props.sidebarWords.length === 0 ? (\r\n                <p>No words to show </p>\r\n              ) : null}\r\n\r\n              <div>\r\n                {this.props.definitionJSON.map((word, i) => {\r\n                  if (this.props.sidebarWords.includes(word[0].word)) {\r\n                    return (\r\n                      <div key={word[0].word}>\r\n                        <hr />\r\n\r\n                        <button\r\n                          className={\"delete-button\"}\r\n                          onClick={() =>\r\n                            this.props.handleDeleteWord(word[0].word)\r\n                          }\r\n                        >\r\n                          x\r\n                        </button>\r\n                        <WordDef\r\n                          autoload={true}\r\n                          definition={[word]}\r\n                          word={word[0].word}\r\n                          lang={this.props.lang}\r\n                          handleSpanClick={this.props.handleSpanClick}\r\n                          vocabSize={this.props.vocabSize}\r\n                          getDefinitions={this.props.getDefinitions}\r\n                          addKnownWord={this.props.addKnownWord}\r\n                          addUnknownWord={this.props.addUnknownWord}\r\n                          removeWord={this.props.removeWord}\r\n                          unknownWords={this.props.unknownWords}\r\n                          addToAppState={this.props.addToAppState}\r\n                        ></WordDef>\r\n                        <hr />\r\n                      </div>\r\n                    );\r\n                  }\r\n                  return null;\r\n                })}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // componentDidUpdate() {\r\n  //   this.forceUpdate();\r\n  // }\r\n\r\n  // create collapsbile and populate list with json\r\n\r\n  // pass in json as props..\r\n\r\n  componentDidMount() {\r\n    // add event listeners here???\r\n    // console.log(this.state);\r\n    // this.populateDefinitionList(this.state.definitionJSON);\r\n  }\r\n  componentDidUpdate(prevProps) {\r\n    if (\r\n      this.props.isLoading !== prevProps.isLoading ||\r\n      this.props.isNewWordLoading !== prevProps.isNewWordLoading\r\n    ) {\r\n      this.setState({ sidebarOpen: true });\r\n    }\r\n  }\r\n\r\n  toggleSidebar = () => {\r\n    this.setState({ sidebarOpen: !this.state.sidebarOpen });\r\n  };\r\n  toggleSearchBox = (e) => {\r\n    this.setState({ searchBoxOpen: !this.state.searchBoxOpen });\r\n  };\r\n\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (this.state.searchTerm.length === 0) {\r\n      return;\r\n    }\r\n    this.setState({ searchWord: this.state.searchTerm, searchTerm: \"\" });\r\n    document.getElementById(\"searchForm\").reset();\r\n  };\r\n}\r\n\r\nexport default Sidebar;\r\n","import React, { Component } from \"react\";\r\n// import { Redirect } from \"react-router-dom\";\r\n// import axios from \"axios\";\r\n// import auth from \"../../utils/auth\";\r\n\r\nimport \"./SidebarLight.scss\";\r\n\r\n// import Collapsible from \"react-collapsible\";\r\n// import Spanner from \"../../Spanner/Spanner\";\r\nimport WordDef from \"../WordDef/WordDef\";\r\nimport SearchResults from \"../SearchResults/SearchResults\";\r\nimport SearchForm from \"../SearchForm/SearchForm\";\r\n\r\nclass SidebarLight extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      sidebarOpen: false,\r\n      searchWord: this.props.searchWord,\r\n      searchTerm: \"\",\r\n      searchBoxOpen: true,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div id=\"sidebar-nav-sm\">\r\n          <button\r\n            onClick={() => this.toggleSidebar()}\r\n            className=\"sidebar-toggle sidebar-toggle-sm\"\r\n          >\r\n            {this.state.sidebarOpen ? \"close\" : \"open\"}\r\n          </button>\r\n        </div>\r\n        <div\r\n          className={\r\n            this.state.sidebarOpen ? \"sidebar sidebar-open\" : \"sidebar\"\r\n          }\r\n        >\r\n          <div className=\"sidebar-sticky\">\r\n            <div className=\"heading\">\r\n              <h2> words</h2>\r\n              <button\r\n                className=\"sidebar-toggle sidebar-toggle-md\"\r\n                onClick={() => this.toggleSidebar()}\r\n              >\r\n                {this.state.sidebarOpen ? \">>\" : \"<<\"}\r\n              </button>\r\n            </div>\r\n            <div className=\"search\">\r\n              <button id=\"hide-search\" onClick={() => this.toggleSearchBox()}>\r\n                {this.state.searchBoxOpen ? \"close search\" : \"open search\"}\r\n              </button>\r\n              <div\r\n                className={\r\n                  this.state.searchBoxOpen\r\n                    ? \"search-box search-box-open\"\r\n                    : \"search-box search-box-closed\"\r\n                }\r\n              >\r\n                <SearchForm\r\n                  value={this.state.searchTerm}\r\n                  handleChange={this.handleChange}\r\n                  lang={this.props.lang}\r\n                  handleSubmit={this.handleSubmit}\r\n                />\r\n\r\n                <div>\r\n                  {this.state.searchWord !== null && (\r\n                    <>\r\n                      <SearchResults\r\n                        history={this.props.history}\r\n                        autoload={true}\r\n                        word={this.state.searchWord}\r\n                        lang={this.props.lang}\r\n                        handleSpanClick={this.handleSpanClick}\r\n                        vocabSize={this.props.vocabSize}\r\n                        getDefinitions={this.props.getDefinitions}\r\n                        addKnownWord={this.props.addKnownWord}\r\n                        addUnknownWord={this.props.addUnknownWord}\r\n                        removeWord={this.props.removeWord}\r\n                        unknownWords={this.props.unknownWords}\r\n                        addToAppState={this.props.addToAppState}\r\n                      />\r\n                    </>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n            {/* {this.props.isNewWordLoading ? <p>adding word ... </p> : null}\r\n            {this.props.isLoading ? <p> Loading words...</p> : null}\r\n            {this.props.sidebarMessage.length > 0 ? (\r\n              <p className=\"sidebar-message\">{this.props.sidebarMessage}</p>\r\n            ) : null} */}\r\n          </div>\r\n\r\n          <div className=\"scroll-wrapper\">\r\n            <div className=\"defs\">\r\n              {/* {this.props.sidebarWords.length === 0 ? (\r\n                <p>No words to show </p>\r\n              ) : null} */}\r\n\r\n              <div>\r\n                {this.props.definitionJSON.map((word, i) => {\r\n                  if (this.props.sidebarWords.includes(word[0].word)) {\r\n                    return (\r\n                      <div key={word[0].word}>\r\n                        <hr />\r\n\r\n                        <button\r\n                          className={\"delete-button\"}\r\n                          onClick={() =>\r\n                            this.props.handleDeleteWord(word[0].word)\r\n                          }\r\n                        >\r\n                          x\r\n                        </button>\r\n                        <WordDef\r\n                          autoload={true}\r\n                          definition={[word]}\r\n                          word={word[0].word}\r\n                          lang={this.props.lang}\r\n                          handleSpanClick={this.props.handleSpanClick}\r\n                          vocabSize={this.props.vocabSize}\r\n                          getDefinitions={this.props.getDefinitions}\r\n                          addKnownWord={this.props.addKnownWord}\r\n                          addUnknownWord={this.props.addUnknownWord}\r\n                          removeWord={this.props.removeWord}\r\n                          unknownWords={this.props.unknownWords}\r\n                          addToAppState={this.props.addToAppState}\r\n                        ></WordDef>\r\n                        <hr />\r\n                      </div>\r\n                    );\r\n                  }\r\n                  return null;\r\n                })}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  componentDidMount() {}\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.searchWord !== prevProps.searchWord) {\r\n      this.setState({ searchWord: this.props.searchWord, sidebarOpen: true });\r\n    }\r\n  }\r\n  toggleSidebar = () => {\r\n    this.setState({ sidebarOpen: !this.state.sidebarOpen });\r\n  };\r\n  toggleSearchBox = (e) => {\r\n    this.setState({ searchBoxOpen: !this.state.searchBoxOpen });\r\n  };\r\n\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (this.state.searchTerm.length === 0) {\r\n      return;\r\n    }\r\n    this.setState({ searchWord: this.state.searchTerm, searchTerm: \"\" });\r\n    document.getElementById(\"searchForm\").reset();\r\n  };\r\n\r\n  handleSpanClick = (e) => {\r\n    this.setState({ searchWord: this.props.sanitizeText(e.target.innerText) });\r\n  };\r\n}\r\n\r\nexport default SidebarLight;\r\n","import React, { Component } from \"react\";\r\n// import { Redirect } from \"react-router-dom\";\r\n// import axios from \"axios\";\r\n// import auth from \"../../utils/auth\";\r\n\r\nimport Nav from \"../Nav/Nav\";\r\nimport RandomWord from \"../RandomWord/RandomWord\";\r\n// import WordDef from \"../WordDef/WordDef\";\r\nimport LanguageDropdown from \"../LanguageDropdown/LanguageDropdown\";\r\nimport SearchResults from \"../SearchResults/SearchResults\";\r\nimport SearchForm from \"../SearchForm/SearchForm\";\r\nimport WordDef from \"../WordDef/WordDef\";\r\nimport Sidebar from \"../Sidebar/Sidebar\";\r\n\r\nimport \"./Home.css\";\r\nimport SidebarLight from \"../SidebarLight/SidebarLight\";\r\n\r\nclass Home extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      searchWord: null,\r\n      searchTerm: \"\",\r\n      sidebarOpen: false,\r\n    };\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"home grid-container\">\r\n        <Nav handleSignout={this.props.handleSignout} />\r\n\r\n        <div className=\"content\">\r\n          <div className=\"main\">\r\n            <h1>Home</h1>\r\n            <div>\r\n              <p>Set language</p>\r\n              <LanguageDropdown\r\n                handleDropdownChange={this.handleDropdownChange}\r\n                lang={this.props.lang}\r\n              ></LanguageDropdown>\r\n            </div>\r\n            <h2>Here is a word you might not know:</h2>\r\n            <RandomWord\r\n              redirectToRead={this.redirectToRead}\r\n              vocabSize={this.props.vocabSize}\r\n              lang={this.props.lang}\r\n              handleSpanClick={this.handleSpanClick}\r\n              getDefinitions={this.props.getDefinitions}\r\n              addKnownWord={this.props.addKnownWord}\r\n              addUnknownWord={this.props.addUnknownWord}\r\n              removeWord={this.props.removeWord}\r\n              unknownWords={this.props.unknownWords}\r\n              addToAppState={this.props.addToAppState}\r\n              history={this.props.history}\r\n            />\r\n          </div>\r\n\r\n          <SidebarLight\r\n            history={this.props.history}\r\n            lang={this.props.lang}\r\n            definitionJSON={[]}\r\n            unknownWords={this.props.unknownWords}\r\n            handleRemoveWord={this.handleRemoveWord}\r\n            handleDeleteWord={this.handleDeleteWord}\r\n            getDefinitions={this.props.getDefinitions}\r\n            addKnownWord={this.props.addKnownWord}\r\n            addUnknownWord={this.props.addUnknownWord}\r\n            removeWord={this.props.removeWord}\r\n            handleSpanClick={this.handleSpanClick}\r\n            searchWord={this.state.searchWord}\r\n            sanitizeText={this.props.sanitizeText}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  componentDidMount() {\r\n    console.log(\"HOME language is:\", this.props.lang);\r\n  }\r\n\r\n  handleDropdownChange = (e) => {\r\n    e.preventDefault();\r\n    // this.setState({ lang: e.target.value });\r\n    this.props.addToAppState(\"lang\", e.target.value);\r\n    // console.log(e.target.value);\r\n\r\n    this.setState({ searchWord: null });\r\n  };\r\n\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (this.state.searchTerm.length === 0) {\r\n      return;\r\n    }\r\n    this.setState({ searchWord: this.state.searchTerm, searchTerm: \"\" });\r\n    document.getElementById(\"searchForm\").reset();\r\n  };\r\n\r\n  handleSpanClick = (e) => {\r\n    let word = this.props.sanitizeText(e.target.innerText)[0];\r\n    this.setState({ searchWord: word });\r\n    //if mobile on mobile logic here:--->\r\n    // this.setState({ sidebarOpen: true });\r\n  };\r\n  redirectToRead = () => {\r\n    this.props.history.push(\"/read\");\r\n  };\r\n  toggleSidebar = () => {\r\n    this.setState({ sidebarOpen: !this.state.sidebarOpen });\r\n  };\r\n}\r\n\r\nexport default Home;\r\n","import React, { Component } from \"react\";\r\n// import { Link } from \"react-router-dom\";\r\n\r\nimport axios from \"axios\";\r\nimport auth from \"../../utils/auth\";\r\n// import auth from \"../../utils/auth\";\r\n\r\nclass Signin extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      message: \"\",\r\n      token: \"\",\r\n      signInEmail: \"\",\r\n      signInPassword: \"\",\r\n      signUpEmail: \"\",\r\n      signUpPassword: \"\",\r\n      currentView: \"signIn\",\r\n    };\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSignIn = this.handleSignIn.bind(this);\r\n    this.handleSignUp = this.handleSignUp.bind(this);\r\n    this.addToAppState = this.props.addToAppState;\r\n  }\r\n\r\n  render() {\r\n    return <section id=\"entry-page\">{this.currentView()}</section>;\r\n  }\r\n\r\n  async componentDidMount() {\r\n    //check to see if already logged in (\r\n    // [using (less supported) null propogation operator)\r\n    // if (localStorage.getItem(\"vocabify\")?.token) {\r\n    // }]\r\n\r\n    if (\r\n      localStorage.getItem(\"vocabify\") &&\r\n      JSON.parse(localStorage.getItem(\"vocabify\")).token\r\n    ) {\r\n      let token = JSON.parse(localStorage.getItem(\"vocabify\")).token;\r\n      let headers = {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `bearer ${token}`,\r\n      };\r\n\r\n      let res = await axios.post(\"/users/authcheck\", null, { headers });\r\n      if (res.status === 200) {\r\n        this.props.history.push(\"/\");\r\n      }\r\n    }\r\n  }\r\n\r\n  changeView = (view) => {\r\n    this.setState({\r\n      currentView: view,\r\n      message: \"\",\r\n    });\r\n  };\r\n\r\n  handleChange(e) {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  }\r\n\r\n  handleSignIn(e) {\r\n    e.preventDefault();\r\n    const { signInEmail, signInPassword } = this.state;\r\n    const { history } = this.props;\r\n\r\n    let obj = { email: signInEmail, password: signInPassword };\r\n\r\n    axios\r\n      .post(\"/users/signin\", obj)\r\n      .then((res) => {\r\n        if (res.data.success) {\r\n          auth.loggingIn();\r\n          console.log(res.data);\r\n\r\n          let { token, vocabSize, lang, words } = res.data;\r\n\r\n          //setting App state\r\n          // this.addToAppState(\"token\", token);\r\n          // this.addToAppState(\"knownWords\", knownWords); // to be removed\r\n          // this.addToAppState(\"unknownWords\", unknownWords); // to be removed\r\n          this.addToAppState(\"vocabSize\", vocabSize);\r\n          this.addToAppState(\"lang\", lang);\r\n          this.addToAppState(\"words\", words);\r\n          //\r\n\r\n          //setting local storage ----\r\n          const local = JSON.parse(localStorage.getItem(\"vocabify\")) || {};\r\n          local.token = token;\r\n          // local.knownWords = knownWords;\r\n          // local.unknownWords = unknownWords;\r\n          local.vocabSize = vocabSize;\r\n          local.lang = lang;\r\n          local.words = words;\r\n          localStorage.setItem(\"vocabify\", JSON.stringify(local));\r\n          // --------------------------\r\n          history.push(\"/\");\r\n          //example of passing data\r\n          // history.push(\"/\", { passedData: \"I am the from the login page\" });\r\n\r\n          // console.log(localStorage);\r\n        } else {\r\n          this.setState({ message: res.data.message });\r\n          console.log(res.data.message);\r\n        }\r\n      })\r\n      .catch((err) => console.log(err));\r\n  }\r\n\r\n  handleSignUp(e) {\r\n    e.preventDefault();\r\n    const { signUpEmail, signUpPassword } = this.state;\r\n\r\n    let obj = { email: signUpEmail, password: signUpPassword };\r\n    console.log(obj);\r\n\r\n    axios\r\n      .post(\"/users/signup\", obj)\r\n      .then((res) => {\r\n        console.log(res.data);\r\n\r\n        if (res.data.success === true) {\r\n          console.log(\"SUCCESS\");\r\n          this.setState({ currentView: \"signIn\", message: \"\" });\r\n        } else {\r\n          this.setState({ message: res.data.message });\r\n\r\n          console.log(res.data.message);\r\n        }\r\n      })\r\n      .catch((err) => console.log(err));\r\n  }\r\n  currentView = () => {\r\n    switch (this.state.currentView) {\r\n      case \"signUp\":\r\n        return (\r\n          <form>\r\n            <h2>Welcome!</h2>\r\n            <fieldset>\r\n              <legend>Sign up</legend>\r\n              <p>{this.state.message}</p>\r\n\r\n              <ul>\r\n                <li>\r\n                  <label>Username:</label>\r\n                  <input\r\n                    value={this.state.signUpEmail}\r\n                    onChange={this.handleChange}\r\n                    name=\"signUpEmail\"\r\n                    type=\"text\"\r\n                    required\r\n                  />\r\n                </li>\r\n                <li>\r\n                  <label>Password:</label>\r\n                  <input\r\n                    value={this.state.signUpPassword}\r\n                    onChange={this.handleChange}\r\n                    name=\"signUpPassword\"\r\n                    type=\"password\"\r\n                    required\r\n                  />\r\n                </li>\r\n              </ul>\r\n            </fieldset>\r\n            <button onClick={(e) => this.handleSignUp(e)}>Sign up</button>\r\n            <button type=\"button\" onClick={() => this.changeView(\"signIn\")}>\r\n              Have an account?\r\n            </button>\r\n          </form>\r\n        );\r\n      // break;\r\n      case \"signIn\":\r\n        return (\r\n          <form>\r\n            <h2>Welcome!</h2>\r\n            <fieldset>\r\n              <legend>Log In</legend>\r\n              <p>{this.state.message}</p>\r\n              <ul>\r\n                <li>\r\n                  <label>Username:</label>\r\n                  <input\r\n                    value={this.state.signInEmail}\r\n                    onChange={this.handleChange}\r\n                    name=\"signInEmail\"\r\n                    type=\"text\"\r\n                    required\r\n                  />\r\n                </li>\r\n                <li>\r\n                  <label>Password:</label>\r\n                  <input\r\n                    value={this.state.signInPassword}\r\n                    onChange={this.handleChange}\r\n                    name=\"signInPassword\"\r\n                    type=\"password\"\r\n                    required\r\n                  />\r\n                </li>\r\n              </ul>\r\n            </fieldset>\r\n            <button onClick={(e) => this.handleSignIn(e)}>Login</button>\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => {\r\n                this.changeView(\"signUp\");\r\n              }}\r\n            >\r\n              Create an Account\r\n            </button>\r\n          </form>\r\n        );\r\n      // break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n}\r\n\r\nexport default Signin;\r\n","import React, { Component } from \"react\";\r\n// import { Redirect } from \"react-router-dom\";\r\n// import axios from \"axios\";\r\n// import auth from \"../../utils/auth\";\r\n\r\nimport SearchForm from \"../SearchForm/SearchForm\";\r\n\r\nimport Nav from \"../Nav/Nav\";\r\n// import RandomWord from \"../RandomWord/RandomWord\";\r\nimport WordDef from \"../WordDef/WordDef\";\r\nimport LanguageDropdown from \"../LanguageDropdown/LanguageDropdown\";\r\nimport SidebarLight from \"../SidebarLight/SidebarLight\";\r\n\r\nimport \"./Account.css\";\r\n\r\nclass Account extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      searchWord: null, //from spanclick\r\n      loadedWords: [],\r\n      searchTerm: \"\", //from input\r\n      sidebarOpen: false,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"account grid-container\">\r\n        <Nav handleSignout={this.props.handleSignout} />\r\n        {/* <h1>Account</h1> */}\r\n        <LanguageDropdown\r\n          handleDropdownChange={this.handleDropdownChange}\r\n          lang={this.props.lang}\r\n        ></LanguageDropdown>\r\n\r\n        <div className=\"content\">\r\n          <div className=\"main\">\r\n            <div>\r\n              {/* <div\r\n                className={\r\n                  this.state.sidebarOpen ? \"sidebar sidebar-open\" : \"sidebar\"\r\n                }\r\n              >\r\n                <SearchForm\r\n                  value={this.state.searchTerm}\r\n                  handleChange={this.handleChange}\r\n                  lang={this.props.lang}\r\n                  handleSubmit={this.handleSubmit}\r\n                />\r\n\r\n                <h3>Word search result </h3>\r\n                <WordDef\r\n                  lang={this.props.lang}\r\n                  autoload={true}\r\n                  word={this.state.searchWord}\r\n                  handleSpanClick={this.handleSpanClick}\r\n                  vocabSize={this.props.vocabSize}\r\n                  getDefinitions={this.props.getDefinitions}\r\n                  addKnownWord={this.props.addKnownWord}\r\n                  addUnknownWord={this.props.addUnknownWord}\r\n                  removeWord={this.props.removeWord}\r\n                  unknownWords={this.props.unknownWords}\r\n                  addToAppState={this.props.addToAppState}\r\n                />\r\n              </div> */}\r\n            </div>\r\n            <div>\r\n              <h2>Your saved words: </h2>\r\n              <ul>\r\n                {this.props.unknownWords.map((word, i) => {\r\n                  return (\r\n                    <li key={word}>\r\n                      {/* hides 'remove' button from span (wordDef component has own button) [alternate/better 'React' version of this is to keep track of words with fetched definitions...] .reason: there is a remove button rendered by the worddef component when definition is fetched*/}\r\n                      <span\r\n                        onClick={(e) =>\r\n                          e.target.tagName === \"P\"\r\n                            ? (e.target.nextElementSibling.style.display =\r\n                                \"none\")\r\n                            : null\r\n                        }\r\n                      >\r\n                        <WordDef\r\n                          lang={this.props.lang}\r\n                          word={word}\r\n                          handleSpanClick={this.handleSpanClick}\r\n                          vocabSize={this.props.vocabSize}\r\n                          getDefinitions={this.props.getDefinitions}\r\n                          addKnownWord={this.props.addKnownWord}\r\n                          addUnknownWord={this.props.addUnknownWord}\r\n                          removeWord={this.props.removeWord}\r\n                          unknownWords={this.props.unknownWords}\r\n                          addToAppState={this.props.addToAppState}\r\n                        />\r\n                        <button\r\n                          className=\"remove-button-unloaded\"\r\n                          onClick={() => this.props.removeWord(word)}\r\n                        >\r\n                          Remove\r\n                        </button>\r\n                      </span>\r\n                    </li>\r\n                  );\r\n                })}\r\n              </ul>\r\n            </div>\r\n          </div>\r\n          <SidebarLight\r\n            history={this.props.history}\r\n            lang={this.props.lang}\r\n            definitionJSON={[]}\r\n            unknownWords={this.props.unknownWords}\r\n            handleRemoveWord={this.handleRemoveWord}\r\n            handleDeleteWord={this.handleDeleteWord}\r\n            getDefinitions={this.props.getDefinitions}\r\n            addKnownWord={this.props.addKnownWord}\r\n            addUnknownWord={this.props.addUnknownWord}\r\n            removeWord={this.props.removeWord}\r\n            handleSpanClick={this.handleSpanClick}\r\n            searchWord={this.state.searchWord}\r\n            sanitizeText={this.props.sanitizeText}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (this.state.searchTerm.length === 0) {\r\n      return;\r\n    }\r\n    this.setState({ searchWord: this.state.searchTerm, searchTerm: \"\" });\r\n    document.getElementById(\"searchForm\").reset();\r\n  };\r\n\r\n  handleSpanClick = (e) => {\r\n    let word = this.props.sanitizeText(e.target.innerText)[0];\r\n    this.setState({ searchWord: word });\r\n    //if mobile on mobile logic here:--->\r\n    // this.setState({ sidebarOpen: true });\r\n  };\r\n\r\n  handleDropdownChange = (e) => {\r\n    e.preventDefault();\r\n    // this.setState({ lang: e.target.value });\r\n    this.props.addToAppState(\"lang\", e.target.value);\r\n    // console.log(e.target.value);\r\n\r\n    this.setState({ searchWord: null });\r\n  };\r\n  toggleSidebar = () => {\r\n    this.setState({ sidebarOpen: !this.state.sidebarOpen });\r\n  };\r\n}\r\n\r\nexport default Account;\r\n","import React, { Component } from \"react\";\r\n// import { Redirect } from \"react-router-dom\";\r\n// import axios from \"axios\";\r\n// import auth from \"../../utils/auth\";\r\n\r\nclass Textarea extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { value: \"\" };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>Textarea</h2>\r\n        {this.props.unknownWords.length < 5 && (\r\n          <>\r\n            <p> Language Test:</p>\r\n            <p>Click submit below the following text.</p>\r\n            <p>Click on words you don't know to look up their definition.</p>\r\n            <p>Click \"add word\" to add this word to your vocabulary list.</p>\r\n            <p> Please add at least 5 words to get started.</p>\r\n            <textarea\r\n              id=\"textarea\"\r\n              value={this.renderText(this.props.lang)}\r\n              onChange={this.handleChange}\r\n              // dont need this\r\n            ></textarea>\r\n          </>\r\n        )}\r\n        {this.props.unknownWords.length >= 5 && (\r\n          <textarea\r\n            id=\"textarea\"\r\n            placeholder=\"Paste your text here\"\r\n            onChange={this.handleChange}\r\n          ></textarea>\r\n        )}\r\n        <button onClick={() => this.props.handleSubmit()}>Submit</button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  //no twoway state binding here. (maybe a better way)\r\n  //need the value to change when dropdown changes lang. (could lift state up to read component i suppose)\r\n\r\n  handleChange = (e) => {\r\n    this.setState({ value: e.target.value });\r\n  };\r\n  renderText = (lang) => {\r\n    console.log(\"render text called\");\r\n    console.log(lang);\r\n\r\n    switch (lang) {\r\n      case \"en\":\r\n        return \"English Test\";\r\n      case \"fr\":\r\n        return \"French TEST\";\r\n      case \"es\":\r\n        return \"Sánchez completará la ronda entre el jueves y el viernes con todas las fuerzas políticas, a cuyos representantes irá de recibiendo en el orden de mayor a menor representación parlamentaria. Con estas reuniones, el presidente del Gobierno persigue “avanzar hacia este gran pacto que permita sentar las bases de la España del día después tras vencer esta pandemia global”. “Tenemos que empezar hoy a construir ya la prosperidad del mañana”, ha asegurado Montero.\";\r\n    }\r\n  };\r\n}\r\n\r\nexport default Textarea;\r\n","import React, { Component } from \"react\";\r\nimport \"./Textreader.css\";\r\n\r\nimport Spanner from \"../../Spanner/Spanner\";\r\n// import { Redirect } from \"react-router-dom\";\r\n// import axios from \"axios\";\r\n// import auth from \"../../utils/auth\";\r\n\r\nclass Textreader extends Component {\r\n  // constructor(props) {\r\n  //   super(props);\r\n  // }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"textreader\">\r\n        <h2>Reader</h2>\r\n        <button onClick={() => this.props.handleNewText()}>New text</button>\r\n        <div className=\"text-reader\">\r\n          <Spanner\r\n            handleSpanClick={this.props.handleSpanClick}\r\n            randomString={this.props.fullTextSplit[this.props.pageNumber]}\r\n          ></Spanner>\r\n        </div>\r\n\r\n        <div className=\"buttons\">\r\n          <button onClick={this.props.handlePrevPage}>previous page</button>\r\n          <button onClick={this.props.handleNextPage}>next page</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Textreader;\r\n","//NOTE handle submit function currently sets the length of page text. to be moved\r\n\r\nimport React, { Component } from \"react\";\r\n// import { Redirect } from \"react-router-dom\";\r\n// import auth from \"../../utils/auth\";\r\nimport \"./Read.scss\";\r\n\r\nimport Nav from \"../Nav/Nav\";\r\nimport Sidebar from \"../Sidebar/Sidebar\";\r\nimport LanguageDropdown from \"../LanguageDropdown/LanguageDropdown\";\r\n\r\nimport Textarea from \"./Textarea/Textarea\";\r\nimport Textreader from \"./Textreader/Textreader\";\r\nimport { Logger } from \"mongodb\";\r\nimport auth from \"../../utils/auth\";\r\n// import axios from \"axios\";\r\n\r\nclass Read extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      currentView: \"submit\",\r\n      knownWords: this.props.knownWords,\r\n      unknownWords: this.props.unknownWords,\r\n      vocabSize: this.props.vocabSize,\r\n      words: [],\r\n      fullText: \"\",\r\n      fullTextSplit: [],\r\n      sidebarWords: [],\r\n      definitionJSON: [],\r\n      isLoading: false,\r\n      isNewWordLoading: false,\r\n      pageNumber: 0,\r\n      largestLoadedPageNumber: -1,\r\n      sidebarMessage: \"\",\r\n      textareaValue: \"\",\r\n    };\r\n\r\n    // this.getDefinitions = this.props.getDefinitions.bind(this);\r\n    this.handleSpanClick = this.handleSpanClick.bind(this);\r\n  }\r\n\r\n  render() {\r\n    const currentView = this.state.currentView;\r\n    if (currentView === \"submit\") {\r\n      return (\r\n        <div className=\"read grid-container\">\r\n          <Nav handleSignout={this.props.handleSignout} />\r\n\r\n          <div className=\"content\">\r\n            <div className=\"main\">\r\n              <h2>Read</h2>\r\n              <LanguageDropdown\r\n                handleDropdownChange={this.handleDropdownChange}\r\n                lang={this.props.lang}\r\n              ></LanguageDropdown>\r\n              <div className=\"text-submit\">\r\n                <Textarea\r\n                  handleSubmit={this.handleSubmit}\r\n                  unknownWords={this.props.unknownWords}\r\n                  lang={this.props.lang}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div className=\"read grid-container\">\r\n          <Nav handleSignout={this.props.handleSignout} />\r\n\r\n          <div className=\"content\">\r\n            <div className=\"main\">\r\n              <h2>Read</h2>\r\n              <LanguageDropdown\r\n                handleDropdownChange={this.handleDropdownChange}\r\n                lang={this.props.lang}\r\n              ></LanguageDropdown>\r\n\r\n              <div className=\"reader\">\r\n                <Textreader\r\n                  fullText={this.state.fullText} //remove\r\n                  fullTextSplit={this.state.fullTextSplit}\r\n                  handleNewText={this.handleNewText}\r\n                  handleSpanClick={this.handleSpanClick}\r\n                  pageNumber={this.state.pageNumber}\r\n                  handleNextPage={this.handleNextPage}\r\n                  handlePrevPage={this.handlePrevPage}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            {/* <div id=\"sidebar-nav-sm\">\r\n              <button onClick={() => this.props.toggleNav()}>open</button>\r\n            </div> */}\r\n            <Sidebar\r\n              history={this.props.history}\r\n              lang={this.props.lang}\r\n              definitionJSON={this.state.definitionJSON}\r\n              unknownWords={this.props.unknownWords}\r\n              handleRemoveWord={this.handleRemoveWord}\r\n              handleDeleteWord={this.handleDeleteWord}\r\n              // handleAddWord={this.handleAddWord}\r\n              getDefinitions={this.props.getDefinitions}\r\n              addKnownWord={this.props.addKnownWord}\r\n              addUnknownWord={this.props.addUnknownWord}\r\n              removeWord={this.props.removeWord}\r\n              sidebarWords={this.state.sidebarWords}\r\n              handleSpanClick={this.handleSpanClick}\r\n              isLoading={this.state.isLoading}\r\n              isNewWordLoading={this.state.isNewWordLoading}\r\n              pageNumber={this.state.pageNumber}\r\n              sidebarMessage={this.state.sidebarMessage}\r\n            />\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  //avoiding settings state from received props when page refreshed (as done in constructor)\r\n  // maybe can do with component will receive props?\r\n  componentDidMount() {\r\n    // hydrate state from local\r\n    let obj = JSON.parse(localStorage.getItem(\"vocabify\"));\r\n    if (obj) {\r\n      let { knownWords, unknownWords, vocabSize } = obj;\r\n      this.setState({ knownWords, unknownWords, vocabSize });\r\n    }\r\n    return null;\r\n  }\r\n\r\n  splitText(string, cutoff) {\r\n    let words = string.split(\" \");\r\n    let arr = [];\r\n    let i = 0;\r\n    while (i < words.length) {\r\n      arr.push(words.slice(i, i + cutoff).join(\" \"));\r\n      i += cutoff;\r\n    }\r\n    return arr;\r\n  }\r\n\r\n  removeWordArrayDupes = (arr) => {\r\n    let noDupes = [];\r\n    let words = [];\r\n    arr.map(function (x) {\r\n      if (!words.includes(x[0].word)) {\r\n        words.push(x[0].word);\r\n        noDupes.push(x);\r\n      }\r\n    });\r\n    return noDupes;\r\n  };\r\n  //TO DO //\r\n  removeCaps(string) {\r\n    //function to remove proper names from text.\r\n    //not capitalized words at start of sentences.\r\n    // only words midsentence\r\n    // /[a-z][ ][A-Z][a-z]/g something like this??\r\n    return string;\r\n  }\r\n\r\n  loadPageDefinitions = async () => {\r\n    this.setState({ isLoading: true });\r\n\r\n    let currentPageText = this.state.fullTextSplit[this.state.pageNumber];\r\n\r\n    let words = this.props.sanitizeText(this.removeCaps(currentPageText));\r\n\r\n    try {\r\n      let definitions = await this.props.getDefinitions(words, \"true\"); //filter: true // only get words that are probably unknown to user\r\n\r\n      let sidebarWordsArray = [];\r\n      definitions.forEach((a) => sidebarWordsArray.push(a[0].word));\r\n\r\n      //adds new defs to sidebar and removes duplicates\r\n      this.setState({\r\n        definitionJSON: this.removeWordArrayDupes([\r\n          ...this.state.definitionJSON,\r\n          ...definitions,\r\n        ]),\r\n        sidebarWords: [\r\n          ...new Set([...this.state.sidebarWords, ...sidebarWordsArray]),\r\n        ],\r\n        isLoading: false,\r\n      });\r\n    } catch (err) {\r\n      console.log(err);\r\n      return;\r\n    }\r\n  };\r\n\r\n  handleSubmit = async () => {\r\n    const length = 50; //SET ELSEWHERE (props based on available space in browser e.g. innerwidth )// sets how many words per page\r\n    const textarea = document.querySelector(\"#textarea\");\r\n\r\n    let fullText = textarea.value;\r\n    let fullTextSplit = this.splitText(fullText, length);\r\n\r\n    this.setState({ currentView: \"read\", fullText, fullTextSplit }, () =>\r\n      this.loadPageDefinitions()\r\n    );\r\n    // this.loadDefinitions();\r\n    // let pageText = this.state.fullTextSplit[this.state.pageNumber];\r\n  };\r\n\r\n  handleNextPage = () => {\r\n    this.setState(\r\n      {\r\n        pageNumber:\r\n          this.state.pageNumber < this.state.fullTextSplit.length - 1\r\n            ? this.state.pageNumber + 1\r\n            : this.state.pageNumber,\r\n      },\r\n      () => {\r\n        if (this.state.pageNumber > this.state.largestLoadedPageNumber) {\r\n          this.setState({ largestLoadedPageNumber: this.state.pageNumber });\r\n          this.loadPageDefinitions();\r\n        } else {\r\n          this.setState({ isLoading: false });\r\n\r\n          console.log(\"definitions already loaded\");\r\n        }\r\n      }\r\n\r\n      //\r\n    );\r\n  };\r\n\r\n  handlePrevPage = () => {\r\n    this.setState({\r\n      pageNumber: this.state.pageNumber === 0 ? 0 : this.state.pageNumber - 1,\r\n    });\r\n  };\r\n\r\n  handleSpanClick = async (e) => {\r\n    //currently doesnt check if word is already in list BEFORE requesting...\r\n\r\n    this.setState({ isNewWordLoading: true });\r\n    // console.log(e.target.classList[1]);\r\n\r\n    let parentWord = e.target.classList[1];\r\n\r\n    let word = e.target.innerText;\r\n\r\n    if (this.state.sidebarWords.indexOf(word) > 0) {\r\n      this.setState({\r\n        sidebarMessage: `Definition of ${word} is already loaded!`,\r\n      });\r\n      setTimeout(() => this.setState({ sidebarMessage: \"\" }), 1500);\r\n      this.setState({ isNewWordLoading: false });\r\n      return;\r\n    }\r\n    let queryWord = this.props.sanitizeText(word);\r\n\r\n    try {\r\n      let def = await this.props.getDefinitions(queryWord, \"false\");\r\n\r\n      if (!def || def.length === 0) {\r\n        this.setState({ isNewWordLoading: false });\r\n        this.setState({\r\n          sidebarMessage: `Could not find definition of ${queryWord}`,\r\n        });\r\n\r\n        setTimeout(() => this.setState({ sidebarMessage: \"\" }), 1500);\r\n        return;\r\n      }\r\n\r\n      let newWord = def[0][0].word;\r\n      console.log(newWord);\r\n\r\n      if (this.state.sidebarWords.indexOf(newWord) > 0) {\r\n        this.setState({\r\n          sidebarMessage: `Definition of ${newWord} already loaded!`,\r\n        });\r\n        setTimeout(() => this.setState({ sidebarMessage: \"\" }), 1500);\r\n\r\n        this.setState({ isNewWordLoading: false });\r\n\r\n        return;\r\n      }\r\n\r\n      let defs = [...this.state.definitionJSON]; //dont mutate state\r\n      let sidebarWordArray = [...this.state.sidebarWords];\r\n\r\n      if (sidebarWordArray.indexOf(parentWord) >= 0) {\r\n        console.log(\r\n          \"index of\",\r\n          parentWord,\r\n          sidebarWordArray.indexOf(parentWord)\r\n        );\r\n        let index = sidebarWordArray.indexOf(parentWord);\r\n        defs.splice(index + 1, 0, def[0]);\r\n        sidebarWordArray.splice(index + 1, 0, newWord);\r\n      } else {\r\n        defs = def.concat(defs);\r\n        sidebarWordArray.unshift(newWord);\r\n      }\r\n      // console.log(defs, sidebarWordArray);\r\n\r\n      //remove dupes (shouldn't be any?)\r\n      defs = Array.from(new Set(defs.map(JSON.stringify)), JSON.parse);\r\n      sidebarWordArray = [...new Set(sidebarWordArray)];\r\n      //\r\n\r\n      this.setState({ definitionJSON: defs });\r\n      this.setState({ sidebarWords: sidebarWordArray });\r\n      this.setState({ isNewWordLoading: false });\r\n      this.setState({ sidebarMessage: \"\" });\r\n    } catch (err) {\r\n      console.log(\"ERROR\", err);\r\n      setTimeout(() => this.setState({ sidebarMessage: \"\" }), 1500);\r\n      this.setState({\r\n        sidebarMessage: `Network error, try again later`,\r\n      });\r\n\r\n      // this.props.history.push(\"./login\");\r\n    }\r\n  };\r\n\r\n  handleNewText = () => {\r\n    this.setState({\r\n      currentView: \"submit\",\r\n      words: \"\",\r\n      fullText: \"\",\r\n      fullTextSplit: [],\r\n      pageNumber: 0,\r\n      largestLoadedPageNumber: 0,\r\n      sidebarWords: [],\r\n      definitionJSON: [],\r\n    });\r\n  };\r\n\r\n  handleAddWord = (e) => {\r\n    //remove\r\n    e.stopPropagation();\r\n    let word = e.target.parentElement.children[0].children[0].innerText;\r\n\r\n    this.props.addUnknownWord(word);\r\n\r\n    //handle with props\r\n    // e.target.style.display = \"none\";\r\n    // e.target.previousElementSibling.style.display = \"block\";\r\n  };\r\n  handleRemoveWord = (e) => {\r\n    //AKA i know this word\r\n    //remove\r\n    e.stopPropagation();\r\n    let word = e.target.parentElement.children[0].children[0].innerText;\r\n    this.props.removeWord(word);\r\n    // e.target.style.display = \"none\";\r\n    // e.target.parentElement.parentElement.remove();\r\n    // sidebarWords.splice(sidebarWords.indexOf(word), 1);\r\n\r\n    // let { sidebarWords } = this.state;\r\n    // sidebarWords.splice(sidebarWords.indexOf(word), 1);\r\n    // this.setState({ sidebarWords });\r\n\r\n    // e.target.nextElementSibling.style.display = \"block\";\r\n    // e.target.parentElement.parentElement.remove();\r\n  };\r\n\r\n  handleDeleteWord = (word) => {\r\n    //removes from sidebar and sets as 'known'\r\n    //I know this word // addknownword ??\r\n\r\n    // e.stopPropagation();\r\n    // let word = e.target.parentElement.children[0].children[0].innerText;\r\n    this.props.addKnownWord(word);\r\n    //handlewithprops\r\n    // e.target.parentElement.parentElement.remove();\r\n\r\n    // sidebarWords.splice(sidebarWords.indexOf(word), 1);\r\n    let { sidebarWords } = this.state;\r\n    sidebarWords.splice(sidebarWords.indexOf(word), 1);\r\n    this.setState({ sidebarWords });\r\n  };\r\n\r\n  handleDropdownChange = (e) => {\r\n    e.preventDefault();\r\n    this.setState({ sidebarWords: [] }); // clears current sidebar (not the JSONdefinitions in the state but they get overwritten on next text submission)\r\n    this.props.addToAppState(\"lang\", e.target.value);\r\n  };\r\n}\r\n\r\nexport default Read;\r\n","import React, { Component } from \"react\";\r\nimport { Switch, Route } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport auth from \"./utils/auth\";\r\n\r\nimport \"./App.scss\";\r\n\r\nimport ProtectedRoute from \"./components/ProtectedRoute/ProtectedRoute\";\r\n\r\nimport Home from \"./components/Home/Home\";\r\nimport Signin from \"./components/Signin/Signin\";\r\nimport Account from \"./components/Account/Account\";\r\nimport Read from \"./components/Read/Read\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      // knownWords: [],\r\n      // unknownWords: [],\r\n      vocabSize: 0,\r\n      lang: \"placeholder\", //can set this to a lang (EN) in case there is a problem loading a language on startup?\r\n      words: {\r\n        en: { knownWords: [], unknownWords: [], vocabSize: \"\" },\r\n        es: { knownWords: [], unknownWords: [], vocabSize: \"\" },\r\n        fr: { knownWords: [], unknownWords: [], vocabSize: \"\" },\r\n        //before language is set..:\r\n        placeholder: { knownWords: [], unknownWords: [], vocabSize: \"\" },\r\n      },\r\n      navOpen: true,\r\n    };\r\n\r\n    this.addToAppState = this.addToAppState.bind(this);\r\n    this.addKnownWord = this.addKnownWord.bind(this);\r\n    this.addUnknownWord = this.addUnknownWord.bind(this);\r\n    this.removeWord = this.removeWord.bind(this);\r\n    this.handleSignout = this.handleSignout.bind(this);\r\n    this.sendAppStateToServer = this.sendAppStateToServer.bind(this);\r\n    this.getDefinitions = this.getDefinitions.bind(this);\r\n    this.toggleNav = this.toggleNav.bind(this);\r\n\r\n    this.saveToLocal = this.saveToLocal.bind(this);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"app-routes\">\r\n          <Switch>\r\n            <Route\r\n              exact\r\n              path=\"/login\"\r\n              render={(props) => (\r\n                <Signin\r\n                  {...props}\r\n                  addToAppState={this.addToAppState}\r\n                  // handleSignout={this.handleSignout}\r\n                />\r\n              )}\r\n            />\r\n\r\n            <Route\r\n              exact\r\n              path=\"/read\"\r\n              render={(props) => (\r\n                <Read\r\n                  {...props}\r\n                  lang={this.state.lang}\r\n                  token={this.state.token}\r\n                  knownWords={this.state.words[this.state.lang].knownWords}\r\n                  unknownWords={this.state.words[this.state.lang].unknownWords}\r\n                  vocabSize={this.state.words[this.state.lang].vocabSize}\r\n                  addKnownWord={this.addKnownWord}\r\n                  addUnknownWord={this.addUnknownWord}\r\n                  removeWord={this.removeWord}\r\n                  handleSignout={this.handleSignout}\r\n                  getDefinitions={this.getDefinitions}\r\n                  addToAppState={this.addToAppState}\r\n                  sanitizeText={this.sanitizeText}\r\n                  navOpen={this.state.navOpen}\r\n                  toggleNav={this.toggleNav}\r\n                />\r\n              )}\r\n            />\r\n\r\n            <ProtectedRoute\r\n              exact\r\n              path=\"/\"\r\n              component={Home}\r\n              lang={this.state.lang}\r\n              handleSignout={this.handleSignout}\r\n              vocabSize={this.state.words[this.state.lang].vocabSize}\r\n              getDefinitions={this.getDefinitions}\r\n              addKnownWord={this.addKnownWord}\r\n              addUnknownWord={this.addUnknownWord}\r\n              removeWord={this.removeWord}\r\n              unknownWords={this.state.words[this.state.lang].unknownWords}\r\n              addToAppState={this.addToAppState}\r\n              sanitizeText={this.sanitizeText}\r\n              navOpen={this.state.navOpen}\r\n              toggleNav={this.toggleNav}\r\n            />\r\n            <ProtectedRoute\r\n              exact\r\n              path=\"/account\"\r\n              component={Account}\r\n              lang={this.state.lang}\r\n              handleSignout={this.handleSignout}\r\n              vocabSize={this.state.words[this.state.lang].vocabSize}\r\n              getDefinitions={this.getDefinitions}\r\n              addKnownWord={this.addKnownWord}\r\n              addUnknownWord={this.addUnknownWord}\r\n              removeWord={this.removeWord}\r\n              unknownWords={this.state.words[this.state.lang].unknownWords}\r\n              addToAppState={this.addToAppState}\r\n              sanitizeText={this.sanitizeText}\r\n              navOpen={this.state.navOpen}\r\n              toggleNav={this.toggleNav}\r\n            />\r\n          </Switch>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  componentDidMount() {\r\n    //app holds its own islogged in state\r\n    let obj = JSON.parse(localStorage.getItem(\"vocabify\"));\r\n    if (obj && obj.isLoggedIn) {\r\n      // let { knownWords, unknownWords, vocabSize, lang, words } = obj; //to be removed\r\n      let { lang, words } = obj;\r\n\r\n      // this.setState({ knownWords, unknownWords, vocabSize, lang, words }); //to be removed\r\n      this.setState({ lang, words });\r\n\r\n      // hydrate state from local (all data, including definitions)\r\n      console.log(\"did mount and is logged in\");\r\n    }\r\n\r\n    console.log(\"did mount\");\r\n  }\r\n\r\n  // util functions -------------------------------------------\r\n\r\n  // save state to local storage\r\n  saveToLocal() {\r\n    let obj = JSON.parse(localStorage.getItem(\"vocabify\"));\r\n    // obj.unknownWords = this.state.unknownWords; //to be removed\r\n    // obj.knownWords = this.state.knownWords; //to be removed\r\n    // obj.vocabSize = this.state.vocabSize;\r\n    obj.lang = this.state.lang;\r\n    obj.words = this.state.words;\r\n    localStorage.setItem(\"vocabify\", JSON.stringify(obj));\r\n  }\r\n\r\n  // will unmount? / window will close// closing window?\r\n  // componentWillUnmount() {\r\n  //   // unload definitions onto localStorage on logout\r\n  // }\r\n\r\n  //set global App state\r\n  addToAppState(key, value) {\r\n    this.setState({ [key]: value });\r\n    console.log(\"key\", key, \"value\", value);\r\n\r\n    // console.log(this.state);\r\n    this.saveToLocal();\r\n  }\r\n\r\n  sendAppStateToServer = async () => {\r\n    let obj = {\r\n      // id: JSON.parse(localStorage.getItem(\"vocabify\")).token,\r\n      words: this.state.words,\r\n      lang: this.state.lang,\r\n    };\r\n    console.log(obj);\r\n    let token = JSON.parse(localStorage.getItem(\"vocabify\")).token;\r\n    //trycatch\r\n    let res = await axios.post(\"/users/updateuser\", obj, {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `bearer ${token}`,\r\n      },\r\n    });\r\n    if (res.data.message === \"User updated\") {\r\n      return { success: true };\r\n    } else {\r\n      return { success: false };\r\n    }\r\n  };\r\n\r\n  //removes dupulicates\r\n  uniq = (a) => {\r\n    return Array.from(new Set(a));\r\n  };\r\n\r\n  //returns array\r\n  sanitizeText = (string, lang = this.state.lang) => {\r\n    let inputText = string\r\n      .toLowerCase()\r\n      .replace(/\\s/g, \" \")\r\n      .replace(/^\\d+$/g, \" \")\r\n      //removed hyphen from list (need to add more?)\r\n      .replace(/[.,/#!?$%^&*;:{}“”=_`~()]/g, \"\")\r\n      .toLowerCase()\r\n      .split(\" \")\r\n      .map((word) => word.trim())\r\n      .filter((word) => word.length > 0);\r\n\r\n    if (lang === \"fr\") {\r\n      inputText = inputText.map((word) =>\r\n        word.replace(/^l'|^l’|^m'|^m’|^t'|^t’|^s'|^s’/gi, \"\")\r\n      );\r\n      console.log(lang);\r\n    }\r\n    return this.uniq(inputText);\r\n  };\r\n\r\n  // -----------------------------------------------------------------\r\n\r\n  getDefinitions = async (wordArray, filter) => {\r\n    let token = JSON.parse(localStorage.getItem(\"vocabify\")).token;\r\n    let obj = {\r\n      lang: this.state.lang,\r\n      // knownWords: this.state.knownWords, //to be removed\r\n      // unknownWords: this.state.unknownWords, //to be removed\r\n      knownWords: this.state.words[this.state.lang].knownWords,\r\n      unknownWords: this.state.words[this.state.lang].unknownWords,\r\n      // vocabSize: this.state.vocabSize,\r\n      words: wordArray,\r\n      filter: filter,\r\n    };\r\n    let headers = {\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: `bearer ${token}`,\r\n    };\r\n    // console.log(obj);\r\n    //try catch\r\n    try {\r\n      let json = await axios.post(\"/words/definitions\", obj, { headers });\r\n      console.log(\"vocabSize\", json.data.vocabSize);\r\n      console.log(json.data);\r\n\r\n      // conditionally set vocabsize? (/words/definitions route doesn't need to return vocabSize every request (not if filter = false for example))\r\n      // this.setState({ vocabSize: json.data.vocabSize });\r\n      this.setState((prevState) => ({\r\n        ...prevState,\r\n        words: {\r\n          ...prevState.words,\r\n          [this.state.lang]: {\r\n            ...prevState.words[this.state.lang],\r\n            vocabSize: json.data.vocabSize,\r\n          },\r\n        },\r\n      }));\r\n      return json.data.definitions;\r\n    } catch (err) {\r\n      if (err.response && err.response.status === 401) {\r\n        console.log(\"unauthorized.. loggin out\");\r\n        auth.loggingOut();\r\n        //force rerender (=> redirect to login page now there is no token  )\r\n        //this saves from having to check auth state in every component at every update (protected routes check when they mount)\r\n        this.forceUpdate();\r\n      }\r\n      console.log(err);\r\n    }\r\n  };\r\n  addKnownWord(word) {\r\n    let { knownWords, unknownWords } = this.state.words[this.state.lang];\r\n    //only adds as known word IF not 'unknown' -\r\n    if (unknownWords.indexOf(word) < 0 && knownWords.indexOf(word) < 0) {\r\n      knownWords.push(word);\r\n    }\r\n    // this.setState({ knownWords, unknownWords }); //change\r\n\r\n    this.setState((prevState) => ({\r\n      ...prevState,\r\n      words: {\r\n        ...prevState.words,\r\n        [this.state.lang]: {\r\n          ...prevState.words[this.state.lang],\r\n          knownWords,\r\n          unknownWords,\r\n        },\r\n      },\r\n    }));\r\n\r\n    this.saveToLocal();\r\n    // console.log(this.state);\r\n  }\r\n\r\n  addUnknownWord(word) {\r\n    let { knownWords, unknownWords } = this.state.words[this.state.lang];\r\n    // if (unknownWords.indexOf(word) !== -1) {   //shouldn't be needed\r\n    //   return;\r\n    // }\r\n    unknownWords.unshift(word);\r\n    if (knownWords.indexOf(word) > 0) {\r\n      knownWords.splice(knownWords.indexOf(word), 1);\r\n    }\r\n    // this.setState({ knownWords, unknownWords }); //change\r\n\r\n    this.setState((prevState) => ({\r\n      ...prevState,\r\n      words: {\r\n        ...prevState.words,\r\n        [this.state.lang]: {\r\n          ...prevState.words[this.state.lang],\r\n          knownWords,\r\n          unknownWords,\r\n        },\r\n      },\r\n    }));\r\n\r\n    this.saveToLocal();\r\n  }\r\n\r\n  removeWord(word) {\r\n    //AKA i know this word ?\r\n    let { knownWords, unknownWords } = this.state.words[this.state.lang];\r\n    let i = unknownWords.indexOf(word);\r\n    if (i >= 0) {\r\n      unknownWords.splice(i, 1);\r\n    }\r\n    knownWords.push(word);\r\n\r\n    // this.setState({ knownWords, unknownWords });\r\n\r\n    this.setState((prevState) => ({\r\n      ...prevState,\r\n      words: {\r\n        ...prevState.words,\r\n        [this.state.lang]: {\r\n          ...prevState.words[this.state.lang],\r\n          knownWords,\r\n          unknownWords,\r\n        },\r\n      },\r\n    }));\r\n\r\n    this.saveToLocal();\r\n  }\r\n\r\n  handleSignout = async (e) => {\r\n    // this.saveToLocal();\r\n    e.preventDefault();\r\n    console.log(\"...Signing out\");\r\n\r\n    //update user data on server\r\n    let signout = await this.sendAppStateToServer();\r\n    if (signout.success) {\r\n      auth.loggingOut();\r\n      this.setState({ navigate: true });\r\n    } else {\r\n      //handle failure\r\n      console.log(\"update failed\");\r\n    }\r\n  };\r\n\r\n  toggleNav() {\r\n    console.log(\"toggle nav\");\r\n\r\n    this.setState({ navOpen: !this.state.navOpen });\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import \"./index.scss\";\r\n\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}